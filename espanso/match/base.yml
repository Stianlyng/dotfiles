# espanso match file

# For a complete introduction, visit the official docs at: https://espanso.org/docs/

# You can use this file to define the base matches (aka snippets)
# that will be available in every application when using espanso.

# Matches are substitution rules: when you type the "trigger" string
# it gets replaced by the "replace" string.
matches:

  ##############################################
  ##                 OBSIDIAN                 ##
  ##############################################

  ###### Templates 
  - trigger: "stian "
    replace: "Stian "
    word: true

    ## metadata
  - trigger: ";m"
    replace:  | 
            ---
            created: {{dateToday}}
            aliases:
            subject:[$|$]
            parent: []
            tags: []
            ---
    label: "New Note Metadata"
    vars:
      - name: dateToday
        type: date
        params:
          format: "%m-%d-%Y"


  ## metadata
  - regex: ";nn(?P<person>.*)\\;"
    replace:  | 
            ---
            created: {{dateToday}}
            aliases:
            subject: {{person}}
            parent: [$|$]
            tags: []
            ---
    label: "New Note, with subject"
    propagate_case: true
    vars:
      - name: dateToday
        type: date
        params:
          format: "%m-%d-%Y"
  
  ## Dataview

  - trigger: ";dataview"
    replace: | 
              ```dataview
              TASK 
              FROM "$|$" 
              WHERE !completed AND meta(section).subpath = "HEADING"
              ```
    label: "Dataview - List tasks under a heading"

  - trigger: ";dataview"
    replace: | 
              ```dataview
              TASK 
              FROM "$|$" 
              WHERE !completed AND meta(section).subpath = "HEADING"
              ```
    label: "Dataview - List tasks under a heading"

  ## Callouts

  - trigger: ";tldr"
    replace: |
            > [!tldr] `= link(this.file.name, "tldr:")`

  - trigger: ";rel"
    replace: "> [!info] _Related:_\n"

  - trigger: ";info"
    replace: "> [!info]+\n"

  ##############################################
  ##                   OTHER                  ##
  ##############################################

  ## ðŸ‘» Emojis

  # Simple text replacement
  - trigger: ";ok"
    replace: "âœ…"
  
  - trigger: "ooo"
    replace: "Ã¸"

  - trigger: "OOO"
    replace: "Ã˜"

  - trigger: "aaa"
    replace: "Ã¥"

  - trigger: "AAA"
    replace: "Ã…"

  - trigger: "eee"
    replace: "Ã¦"

  - trigger: "EEE"
    replace: "Ã†"

# NORSK 

  - trigger: "kjore"
    replace: "kjÃ¸re"
    propagate_case: true
    word: true


  - trigger: ";p"
    replace: "System.out.println($|$);"

  - trigger: ";fi"
    replace: "for (int i = 0; i < $|$; i++)"

  - trigger: ";fj"
    replace: "for (int j = 0; j < $|$; j++)"

  - trigger: ";func"
    replace: "public static void main(String[] args) {$|$\n}"

  - trigger: ";class"
    replace: "public class Main {$|$\n}"

  - trigger: ";new"
    replace: "public class Main { \n\tpublic static void main(String[] args) {\n$|$\n}\n}"
  


#### Latex
  - trigger: ";te"
    replace: "\\text{$|$}"





  ##############################################
  ##                 EXAMPLES                 ##
  ##############################################


  #### Various stuff

  # Get date in a week: "echo | date -v+7d +%Y-%m-%d" 
  # Get date in a 4 days: "echo | date -v+4d +%Y-%m-%d" 

    # Print the current date
  - trigger: ":date"
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%m/%d/%Y"


  #### REGEX
 
  - regex: ":greet\\((?P<person>.*)\\)" # -> :greet(John)
    replace: "Hi {{person}}!"

  - regex: "nasdn (?P<person>.*)\\." # -> greet {{person}}.
    replace: "Hi {{person}}!"

  #### Shell

    # Print the output of a shell command
  - trigger: ":shell"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "echo 'Hello from your shell'"


# cmd: command for the date in one week: echo | date -v+7d +%Y-%m-%d



# norsk


